apiVersion: v1
kind: ConfigMap
metadata:
  name: testdatapy-scripts
  namespace: confluent
data:
  produce-correlated.py: |
    import random
    import json
    import subprocess
    import time
    from datetime import datetime, timedelta
    
    # Generate customers
    customers = []
    for i in range(100):
        customer = {
            "customer_id": f"CUST_{1001 + i}",
            "name": f"Customer {i + 1}",
            "email": f"customer{i+1}@example.com",
            "phone": f"+1-555-{1000 + i:04d}",
            "country": random.choice(["USA", "UK", "Canada", "Germany", "France"])
        }
        customers.append(customer)
    
    # Save to CSV
    with open('/tmp/customers.csv', 'w') as f:
        f.write("customer_id,name,email,phone,country\n")
        for c in customers:
            f.write(f"{c['customer_id']},{c['name']},{c['email']},{c['phone']},{c['country']}\n")
    
    # Generate orders
    orders = []
    base_time = datetime.now() - timedelta(days=1)
    for i in range(500):
        customer = random.choice(customers)
        order_time = base_time + timedelta(minutes=i * 2)
        order = {
            "order_id": f"ORDER_{10001 + i}",
            "customer_id": customer["customer_id"],
            "order_date": order_time.isoformat() + "Z",
            "total_amount": round(random.uniform(10.0, 1000.0), 2),
            "status": "pending"
        }
        orders.append(order)
    
    # Save to CSV
    with open('/tmp/orders.csv', 'w') as f:
        f.write("order_id,customer_id,order_date,total_amount,status\n")
        for o in orders:
            f.write(f"{o['order_id']},{o['customer_id']},{o['order_date']},{o['total_amount']},{o['status']}\n")
    
    # Generate payments (80% of orders get paid)
    payments = []
    paid_orders = random.sample(orders, int(len(orders) * 0.8))
    for i, order in enumerate(paid_orders):
        # Payment happens 5-60 minutes after order
        order_time = datetime.fromisoformat(order["order_date"].replace("Z", ""))
        payment_time = order_time + timedelta(minutes=random.randint(5, 60))
        payment = {
            "payment_id": f"PAY_{100001 + i}",
            "order_id": order["order_id"],
            "payment_date": payment_time.isoformat() + "Z",
            "amount": order["total_amount"],
            "payment_method": random.choice(["credit_card", "debit_card", "paypal", "bank_transfer"]),
            "status": "completed"
        }
        payments.append(payment)
    
    # Save to CSV
    with open('/tmp/payments.csv', 'w') as f:
        f.write("payment_id,order_id,payment_date,amount,payment_method,status\n")
        for p in payments:
            f.write(f"{p['payment_id']},{p['order_id']},{p['payment_date']},{p['amount']},{p['payment_method']},{p['status']}\n")
    
    # Produce to Kafka using count to limit messages
    print("Producing customers...")
    subprocess.run([
        "testdatapy", "produce",
        "--config", "/config/kafka-config.json",
        "--topic", "customers",
        "--format", "json",
        "--generator", "csv",
        "--csv-file", "/tmp/customers.csv",
        "--key-field", "customer_id",
        "--count", str(len(customers)),  # Limit to actual number of customers
        "--rate", "0"
    ])
    
    print("Producing orders...")
    subprocess.run([
        "testdatapy", "produce",
        "--config", "/config/kafka-config.json",
        "--topic", "orders",
        "--format", "json",
        "--generator", "csv",
        "--csv-file", "/tmp/orders.csv",
        "--key-field", "order_id",
        "--count", str(len(orders)),  # Limit to actual number of orders
        "--rate", "0"
    ])
    
    print("Producing payments...")
    subprocess.run([
        "testdatapy", "produce",
        "--config", "/config/kafka-config.json",
        "--topic", "payments",
        "--format", "json",
        "--generator", "csv",
        "--csv-file", "/tmp/payments.csv",
        "--key-field", "payment_id",
        "--count", str(len(payments)),  # Limit to actual number of payments
        "--rate", "0"
    ])
    
    print("Correlated data production complete!")
    print(f"Generated: {len(customers)} customers, {len(orders)} orders, {len(payments)} payments")
